@startuml
!include style.puml
skinparam arrowColor #BLACK
skinparam noteTextAlignment left


Participant "<color:pink><<Class>>\nParser" as Parser LOGIC_COLOR_T4
Participant "<color:pink><<Class>>\nParserUtility" as UParser LOGIC_COLOR_T2

[-> Parser : parseKeyword(userInput:String)
activate Parser
Parser -->[ : keywordString:String
deactivate Parser

loop #e6fdea for each XYZ term in command
    note right : XYZ is a placeholder for the terms required for a command \n\
    e.g. NAME or GROUP_INDEX for an **add** command.

    [-> Parser : parseXYZ(userInput:String)
    activate Parser

    note right : XYZ in the methods are replaced accordingly \n\
    e.g. parseName or parseGroupIndex

    ' checkContainsOnlyOneDelimiter
    Parser -> UParser : checkContainsOnlyOneDelimiter(userInput:String, delimiterXYZ:String)
    activate UParser
    opt #OldLace found no delimiterXYZ
        UParser --> Parser : :MissingDelimiterException
        Parser -->[ : :MissingDelimiterException
    else found too many delimiterXYZ
        UParser --> Parser : :DuplicateDelimiterException
        Parser -->[ : :DuplicateDelimiterException
    end opt
    UParser --> Parser
    deactivate UParser

    ' parseDelimitedTerm
    Parser -> UParser : parseDelimitedTerm(userInput:String, delimiterXYZ:String)
    activate UParser
    opt #OldLace XYZ.isBlank()
        UParser --> Parser : :EmptyStringException
        Parser -->[ : :EmptyStringException
    end opt
    UParser --> Parser : //XYZ//:object
    deactivate UParser

    Parser -->[ : //XYZ//:object
    deactivate Parser

    ' needs Validation
    opt #eae6fd if //XYZ// needs validation checking
        [-> Parser : getValidXYZ(//XYZ//:String, [maxValue:int])
        note right : [maxValue:int] is only needed if //XYZ// is not Money
        activate Parser

        ' isMoney?
        alt //XYZ// is Money

            opt #OldLace //XYZ// is not a double
                Parser -->[ : :InvalidMoneyException
            end opt

            ' checkNegative
            Parser -> UParser : checkNegativeMoney(//XYZ//:double)
            activate UParser
            opt #OldLace //XYZ// is negative
                UParser --> Parser : :NumberFormatException
                Parser -->[ :InvalidMoneyException
            end opt
            UParser --> Parser
            deactivate UParser

            Parser -->[ : //XYZ//:double

        ' notMoney
        else //XYZ// is not Money

            opt #OldLace //XYZ// is an integer
                Parser -->[ : :InvalidIndexException
            end opt

            ' checkTooHigh
            Parser -> UParser : checkTooHighIndex(//XYZ//:int, maxValue:int)
            activate UParser
            opt #OldLace //XYZ// > maxValue
                UParser --> Parser : :IndexOutOfBoundsException
                Parser -->[ :InvalidIndexException
            end opt
            UParser --> Parser
            deactivate UParser

            ' checkTooLow
            Parser -> UParser : checkTooLowIndex(//XYZ//:int, 1:int)
            activate UParser
            opt #OldLace //XYZ// < 1 //(MIN_INDEX)//
                UParser --> Parser : :IndexOutOfBoundsException
                Parser -->[ :InvalidIndexException
            end opt
            UParser --> Parser
            deactivate UParser

            Parser -->[ : //XYZ//:int
            deactivate Parser
        end opt
    end opt

end loop

@enduml

